// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field Array s;
	field int currL, maxL;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		
		var int n;
		
		let maxLength = maxLength + 1;
		let maxL = maxLength;
		let currL = 0;
		
		let s = Array.new(maxLength);
		
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
	
		do Memory.deAlloc(this);
		return;
	
    }

    /** Returns the current length of this string. */
    method int length() {
		return currL;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		
		let s[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
				
		let s[currL] = c;
		let currL = currL + 1;
	
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		
		let currL = currL - 1;
		let s[currL] = -1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		
		var int sum, n, max, c;
		var boolean neg;
		var Array multiplier;
		
		let n = 0;
		let sum = 0;
		let multiplier = Array.new(5);
		
		let multiplier[0] = 1;
		let multiplier[1] = 10;
		let multiplier[2] = 100;
		let multiplier[3] = 1000;
		let multiplier[4] = 10000;
		
		if(s[n] = 45){
			let neg = true;
			let n = n + 1;
			let max = maxL - 2;
		}
		else {
			let neg = false;
			let max = maxL - 1;
		}
		
		while (n < (maxL - 1)){
		
			let c = s[n] - 48;
			let c = c * multiplier[max - 1];
			let sum = c + sum;
			let max = max - 1;
			let n = n + 1;
			
		}
		
		if(neg){
			let sum = ~(sum) + 1;
		}
		
		return sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		
		var int lastdigit, mod, tempVal;
		var int c, n;
		var Array tempArray;
		
		let currL = 0;
		
		if (val < 0){
			let val = Math.abs(val);
			do appendChar(45);
		}
		
		let tempArray = Array.new(maxL);
		
		let n = maxL - 1;
		
		let tempVal = val;
		
		let mod = tempVal / 10;
		let mod = mod * 10;
		let mod = tempVal - mod;
		
		let lastdigit = mod;
		
		let c = lastdigit + 48;
		
		let tempArray[n] = c;
		
//		do appendChar(c);
		
		while (tempVal > 10){
			
			let n = n - 1;
			let tempVal = tempVal / 10;
			
			let mod = tempVal / 10;
			let mod = mod * 10;
			let mod = tempVal - mod;
			
			let lastdigit = mod;
			let c = lastdigit + 48;
			let tempArray[n] = c;
//			do appendChar(c);
			
		}
		
		
		while (n < maxL){
		
			do appendChar(tempArray[n]);
			let n = n + 1;
		
		}
		
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		
		var int c;
		let c = 128;
		
		return c;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		
		var int c;
		let c = 129;
		
		return c;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		
		var int c;
		let c = 34;
		
		return c;
    }
}
