// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array RAM;
	static Array Heap;
	static int Next, Size;

    /** Initializes the class. */
    function void init() {
		let RAM = 0;
		let Heap = 2048;
		let Heap[0] = -1;
		let Heap[1] = 14334;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	
		return RAM[address];
	
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	
		let RAM[address] = value;
		return;
	
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
	
		var int CurrBlockPointer, CurrBlockSize, NextBlockPointer;
		
		let CurrBlockPointer = 0;
		let NextBlockPointer = Heap[CurrBlockPointer];
		let CurrBlockSize = Heap[CurrBlockPointer + 1];
		
		
		while ((~(NextBlockPointer = 0))){
		
			
			//Check if current block has enough memory
			if ((CurrBlockSize > 0) & (CurrBlockSize > (size + 2))){
				
				//Reduce Size of current block
				let Heap[CurrBlockPointer + 1] = CurrBlockSize - (size + 2);
				
				//Set pointer for next block
				let Heap[CurrBlockPointer] = Heap[CurrBlockPointer + 1] + CurrBlockPointer + 2 + 2048;
				let NextBlockPointer = Heap[CurrBlockPointer] - 2048;
				
				//Set pointer for the new block
				let Heap[NextBlockPointer] = size + Heap[CurrBlockPointer] + 2;
				
				
				if (Heap[NextBlockPointer] > 16383) {
				
					let Heap[NextBlockPointer] = 0;
					
				}
				
				//Set size of next block (and assign a negative number to mark as allocated);
				let Heap[NextBlockPointer + 1] = ~(size) + 1;
				
				//return address to object
				return (NextBlockPointer + 2 + 2048);
				
			}
			
			else {
				
				let CurrBlockPointer = NextBlockPointer;
				
				let NextBlockPointer = Heap[CurrBlockPointer];
				
				if (NextBlockPointer = 0){
					
					do Output.printInt(0);
					return false;
					
				}
				
				
				let CurrBlockSize = Heap[CurrBlockPointer + 1];
				
			}
			
			
		}
		
		do Output.printInt(0);
		return false;
	
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		
		var int CurrBlockSize;
			
		let CurrBlockSize = Heap[o-1-2048];
		
		let CurrBlockSize = ~(CurrBlockSize) + 1;
		
		let Heap[o-1-2048] = CurrBlockSize;
		
		return;
	
    }    
}
