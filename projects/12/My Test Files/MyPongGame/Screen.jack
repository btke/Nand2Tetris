// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

	static boolean color;
	static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
		
		var int n, Mod;
		
		let color = true;
		let twoToThe = Array.new(16);
		
		let twoToThe[0] = 1; // 2^0
		let twoToThe[1] = 2; // 2^1
		let twoToThe[2] = 4; // 2^2
		let twoToThe[3] = 8; // 2^3
		let twoToThe[4] = 16; // 2^4
		let twoToThe[5] = 32; //2^5
		let twoToThe[6] = 64; //2^6
		let twoToThe[7] = 128; //2^7
		let twoToThe[8] = 256; //2^8
		let twoToThe[9] = 512; //2^9
		let twoToThe[10] = 1024; //2^10
		let twoToThe[11] = 2048; //2^11
		let twoToThe[12] = 4096; //2^12
		let twoToThe[13] = 8192; //2^13
		let twoToThe[14] = 16384; //2^14
		let twoToThe[15] = 32767 + 1; //2^15
		
		return;
	
    }

    /** Erases the entire screen. */
    function void clearScreen() {
	
	do Screen.setColor(false);
	
	do Screen.drawRectangle(0, 0, 511, 255);
	
	return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
	
		if (b) {
			let color = true;
		}
		else {
			let color = false;
		}
		
		return;
		
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
	
		var int address, currValue, newValue, mod, bit;
		
		let address = 16384 + ((32 * y) + (x / 16));
		
		let currValue = Memory.peek(address);
		
		let bit = x & 15;
		
		if(color) {
			let newValue = (currValue | twoToThe[bit]);
		}
		else {
			let newValue = (currValue & ~(twoToThe[bit]));
		}
		
		do Memory.poke(address, newValue);
		
		return;
		
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
	
		var int a, b, da, db, dx, dy, diff, address1a, address1b, address2a, address2b, xTemp1, xTemp2, aTemp, yTemp1, yTemp2, delX1, delX2, MemVal, currValue, newValue;
		
		if (x2 > 511){
			let x2 = 511;
		}
		
		if (y2 > 255){
			let y2 = 255;
		}		

		let a = x1;
		let b = y1;
		
		let da = x2 - a;
		let db = y2 - b;
		
		let dx = x2 - x1;
		let dy = y2 - y1;
		
		do Screen.drawPixel(a, b);		
		
		if ((da > 15) & (db = 0)) {
			
			let yTemp1 = 32 * y1;
			let yTemp2 = yTemp1 + 16384;
			
			let address1a = 16384 + (yTemp1 + (x1 / 16));
			let address2a = 16384 + (yTemp1 + (x2 / 16));
			
			let address1b = address1a + 1;
			let address2b = address2a;
			
			let xTemp1 = 16 * (address1b - yTemp2);
			let xTemp2 = 16 * (address2b - yTemp2);
			
			let delX1 = xTemp1 - x1;
			let delX2 = x2 - xTemp2;
			
			let currValue = Memory.peek(address1a);

			let MemVal = ~(twoToThe[15 - (delX1 - 1)]) + 1;
					
			if(color) {
				let newValue = (currValue | MemVal);
			}
			else {
				let newValue = (currValue & ~(MemVal));
			}			
			
			do Memory.poke(address1a, newValue);
			
			while (address1b < address2b){
			
				if(color) {
					do Memory.poke(address1b, -1);
					let address1b = address1b + 1;
				}
				else {
					do Memory.poke(address1b, 0);
					let address1b = address1b + 1;
				}
			
			}
			
			let currValue = Memory.peek(address2a);
			let MemVal = twoToThe[delX2] - 1;
			
			if(color) {
				let newValue = (currValue | MemVal);
			}
			else {
				let newValue = (currValue & ~(MemVal));
			}			
			
			do Memory.poke(address2a, newValue);
			
		return;
		}
		
		if((da > 0) & (da < 16) & (db = 0)){
		
			while (a < x2){
				
				let a = a + 1;
				do Screen.drawPixel(a, b);
			
			}
			
		return;
		}
				
		if ((da = 0) & (db > 0)) {
			
			while (b < y2){
				
				let b = b + 1;
				do Screen.drawPixel(a, b);
				
			}
			
		return;
		}
		
		if ((da = 0) & (db < 0)) {
		
			while (b > y2){
				
				let b = b - 1;
				do Screen.drawPixel(a, b);
				
			}
			
		return;
		}
		
				
		if ((da < 0) & (db = 0)) {
		
			while (a > x2){
				
				let a = a - 1;
				do Screen.drawPixel(a, b);
				
			}
			
		return;
		}
		
		if ((da > 0) & (db > 0)){
		
			let diff = 1;
		
			while ((a < x2) & (b < y2)){
		
				if (diff > 0){
				
					let a = a + 1;
					let diff = diff - dy;
				
				}
				else {
				
					let b = b + 1;
					let diff = diff + dx;
				
				}
				
			do Screen.drawPixel(a, b);
		
			}
			
			return;
		
		}
		
		if ((da < 0) & (db > 0)){
		
			let diff = -1;
			
			while ((a > x2) & (b < y2)){
			
				if (diff > 0){
				
					let b = b + 1;
					let diff = diff + dx;
				
				}
				else {
				
					let a = a - 1;
					let diff = diff + dy;
					
				}
			
			do Screen.drawPixel(a, b);
			
			}
			
			return;	
		
		}

		if ((da > 0) & (db < 0)){
		
			let diff = -1;
			
			while ((a < x2) & (b > y2)){
			
				if (diff < 0){
				
					let a = a + 1;
					let diff = diff - dy;
				
				}
				else {
				
					let b = b - 1;
					let diff = diff - dx;
					
				}
			
			do Screen.drawPixel(a, b);
			
			}
			
			return;	
		
		}	

		if ((da < 0) & (db < 0)){
		
			let diff = 1;
			
			while ((a > x2) & (b > y2)){
			
				if (diff > 0){
				
					let a = a - 1;
					let diff = diff + dy;
				
				}
				else {
				
					let b = b - 1;
					let diff = diff - dx;
					
				}
			
			do Screen.drawPixel(a, b);
			
			}
			
			return;	
		
		}		
		
	return;
		
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	
		var int yTemp1, yTemp2, yMid;
		
		let yTemp1 = y1;
				
		while (yTemp1 < y2){
		
			do Screen.drawLine(x1, yTemp1, x2, yTemp1);
			let yTemp1 = yTemp1 + 1;
		}
		return;
	
    }
	

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
	
		var int yTop, yBot, delY, xTop1, xTop2, xBot1, xBot2, Sqr;
		
		let yTop = y - r;
		let yBot = y + r;
		
		do Screen.drawPixel(x, yTop);
		do Screen.drawPixel(x, yBot);
		
		while (yTop < y) {
		
			let yTop = yTop + 1;
			let yBot = yBot - 1;
			let delY = y - yTop;
			let Sqr = Math.sqrt(((r*r) - (delY*delY)));
			let xTop1 = x - Sqr;
			let xTop2 = x + Sqr;
			
			do Screen.drawLine(xTop1, yTop , xTop2, yTop);
			do Screen.drawLine(xTop1, yBot , xTop2, yBot);
		}
	
	return;
	
    }
}
