
/** Implements a ball. */
class Ball {

   field int x, y; // screen location of the ball's top-left corner
   field int xDir, yDir; //Direction of the ball
   field int Batx, Baty, AIBatx, AIBaty;
   field Score score;
   
   /** Constructs a new Ball with a given location and size. */
   constructor Ball new(int Ax, int Ay) {
      let x = Ax;
      let y = Ay;
	  let score = Score.new();
	  do score.ShowScore();
	  /** Sets the initial direction */
	  let xDir = 1; 
	  let yDir = 0;
      do draw();
      return this;
   }
	
	      /** Accessors. */
   method int getBallx() { return x; }
   method int getBally() { return y; } 
	
	
   /** Disposes this ball. */
   method void dispose() {
      do Memory.deAlloc(this);
	  do score.dispose();
      return;
   }

   /** Draws the ball on the screen. */
   method void draw() {
      do Screen.setColor(false);
      do Screen.drawCircle(x, y, 5);
      return;
   }

   /** Erases the ball from the screen. */
   method void erase() {
      do Screen.setColor(true);
      do Screen.drawCircle(x, y, 6);
      return;
   }
	
	method void CheckCollision() {
		
			
		/** Check and handle collision with walls. */
		if ((x - 5) = 1) {
			do score.incPlayerScore();
			do score.ShowScore();
			do resetBall();
		}
	  
		if ((x + 5) = 510) {
			do score.incAIScore();
			do score.ShowScore();
			do resetBall();
		}
	  
		if ((y - 5) < 15) {
			let yDir = -1 * yDir;
		}
	  
		if ((y + 5) > 239) {
			let yDir = -1 * yDir;
		}
		
		/** Check and handle collision with Player bat. */
		if (((y + 5) > Baty) & ((y - 5) < (Baty + 50)) & ((x + 5) > Batx) & ((x - 5) < (Batx + 5))) {
						
			if (yDir = 0) {
				let yDir = 1;
			}
						
			// If ball is between 0 < y < 10, increase the Y-Speed to 2
						
			if (((y + 5) > Baty) & (y < (Baty + 10))) {
				if (yDir < 0){
					let yDir = 2 * yDir;
				}
				else {
					let yDir = -1 * yDir;
				}
			}
						
			// If ball is between 10 < y < 20, set Y speed to 1
						
			if ((y > (Baty + 10)) & (y < (Baty + 20))) {
				if (yDir < 0){
					let yDir = 1 * yDir;
				}
				else {
					let yDir = -1 * yDir;
				}
			}
						
			// If ball is between 20 < y < 30, Set Y Speed to 1
						
			if ((y > (Baty + 20)) & (y < (Baty + 30))) {
				let yDir = 0;
			}					
						
			// If ball is between 30 < y < 40, Set Y Speed to 1
						
			if ((y > (Baty + 30)) & (y < (Baty + 40))) {
				if (yDir < 0){
					let yDir = -1 * yDir;
				}
				else {
					let yDir = 1 * yDir;
				}
			}
						
			// If ball is between 40 < y < 50, Set Y Speed to 2
						
			if ((y > (Baty + 40)) & ((y - 5) < (Baty + 50))) {
				if (yDir < 0){
					let yDir = -1 * yDir;
				}
				else {
					let yDir = 2 * yDir;
				}
			}
						
			//Send ball the other way
			let xDir = -1 * xDir;
			let x = x - 5;
						
			if (yDir > 4) {
				let yDir = 4;
			}
			
			if (yDir  < -4) {
				let yDir = -4;
			}
						
		}
		
				
		/** Check and handle collision with AI bat. */
		if (((y + 5) > AIBaty) & ((y - 5) < (AIBaty + 50)) & ((x - 5) < (AIBatx + 5)) & ((x + 5) > AIBatx)) {
						
			if (yDir = 0) {
				let yDir = 1;
			}
						
			// If ball is between 0 < y < 10, increase the Y-Speed to 2
						
			if (((y + 5) > AIBaty) & (y < (AIBaty + 10))) {
				if (yDir < 0){
					let yDir = 2 * yDir;
				}
				else {
					let yDir = -1 * yDir;
				}
			}
						
						
			// If ball is between 10 < y < 20, set Y speed to 1
						
			if ((y > (AIBaty + 10)) & (y < (AIBaty + 20))) {
				if (yDir < 0){
					let yDir = 1 * yDir;
				}
				else {
					let yDir = -1 * yDir;
				}
			}
				
			// If ball is between 20 < y < 30, Set Y Speed to 1
						
			if ((y > (AIBaty + 20)) & (y < (AIBaty + 30))) {
				let yDir = 0;
			}
						
			// If ball is between 30 < y < 40, Set Y Speed to 1
						
			if ((y > (AIBaty + 30)) & (y < (AIBaty + 40))) {
				if (yDir < 0){
					let yDir = -1 * yDir;
				}
				else {
					let yDir = 1 * yDir;
				}
			}
						
			// If ball is between 40 < y < 50, Set Y Speed to 2
						
			if ((y > (AIBaty + 40)) & ((y - 5) < (AIBaty + 50))) {
				if (yDir < 0){
					let yDir = -1 * yDir;
				}
				else {
					let yDir = 2 * yDir;
				}
			}
						
			let xDir = -1 * xDir;
			let x = x + 5;
						
			if (yDir > 4) {
				let yDir = 4;
			}
			if (yDir  < -4) {
				let yDir = -4;
			}

		}
		
	return;
	}
	
	method void resetBall(){
		do erase();
		let x = 255;
		let y = 127;
		let xDir = 1; 
		let yDir = 0;
		do draw();
		do Sys.wait(500);
		return;
	}

   /** Moves the ball by 1 pixels. */
   method void move(int Px, int Py, int AIx, int AIy) {
      
	   let Batx = Px;
	   let Baty = Py;
	   let AIBatx = AIx;
	   let AIBaty = AIy;
	   
	   do erase();
       do CheckCollision();	   
	   let x = x + xDir;
	   let y = y + yDir;     
	   do draw();
    
      return;
   }


}
